"" Source your .vimrc
"source ~/.vimrc

" let g:EasyMotion_do_mapping = 0

let mapleader=' '

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch
set showmode
set showcmd

set nu
set rnu

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

set clipboard+=unnamed,unnamedplus

" Plugins
set NERDTree
set commentary
set surround
set sneak
set easymotion
set quickscope

" IDEA features
set ideamarks
set ideajoin

" Don't use Ex mode, use Q for formatting.
" map Q gq

map <Leader>hrr <Action>(IdeaVim.ReloadVimRc.reload)

map <Leader>s<Leader> <Plug>(easymotion-prefix)

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
map <Leader>ff <Action>(ReformatCode)
map <Leader>fc <Action>(CodeCleanup)
map <Leader>fo <Action>(OverrideMethods)
map <Leader>fi <Action>(ImplementMethods)
map <Leader>fg <Action>(Generate)
map <Leader>frr <Action>(Refactorings.QuickListPopupAction)
map <Leader>frn <Action>(RenameElement)
map <Leader>frm <Action>(Move)
map <Leader>frd <Action>(SafeDelete)

map <Leader>cc <Action>(CommentByLineComment)
map <Leader>cb <Action>(CommentByBlockComment)

"" Map <leader>d to start debug
map <Leader>rr <Action>(Run)
map <Leader>rd <Action>(Debug)
map <Leader>rs <Action>(Stop)

"" Map \b to toggle the breakpoint on the current line
map <Leader>bb <Action>(ToggleLineBreakpoint)
map <Leader>bt <Action>(ToggleTemporaryLineBreakpoint)
map <Leader>be <Action>(ToggleBreakpointEnabled)

map <Leader>bP <Action>(PinActiveEditorTab)

map <Leader>a <Action>(ShowIntentionActions)
map <Leader>ca <Action>(ShowIntentionActions)
map <Leader>cla <Action>(ShowIntentionActions)

map <Leader><Leader> <Action>(SearchEverywhere)

" +code
map <Leader>cb <Action>(GotoSuperMethod)
map <Leader>cd <Action>(GotoDeclaration)
map <Leader>cD <Action>(FindUsages)
map <Leader>cr <Action>(RenameElement)
map <Leader>ct <Action>(GotoTypeDeclaration)
map <Leader>cS <Action>(FileStructurePopup)

nmap gcc <Action>(CommentByLineComment)
nmap gcb <Action>(CommentByBlockComment)
vmap gc <Action>(CommentByLineComment)
vmap gb <Action>(CommentByBlockComment)

" Rider mappings
if &ide =~? 'rider'
  map <Leader>ci <Action>(ReSharperGotoImplementation)
  map ]e <Action>(ReSharperGotoNextErrorInSolution)
  map [e <Action>(ReSharperGotoPrevErrorInSolution)
endif

map [n <Action>(Back)
map ]n <Action>(Forward)

map <Leader>td <Action>(ToggleDistractionFreeMode)
map <Leader>tz <Action>(ToggleZenMode)
map <Leader>tp <Action>(TogglePresentationMode)
map <Leader>tC <Action>(ToggleCompactMode)
map <Leader>tT <Action>(VimFindActionIdAction)

" NERDTree mappings
" map <Leader>pp :NERDTree<CR>
map <Leader>op :NERDTreeToggle<CR>
" map <Leader>op <Action>(ActivateProjectToolWindow)
map <Leader>oP :NERDTreeFind<CR>
" map <Leader>oP <Action>(SelectInProjectView)
" map <Leader>pc :NERDTreeClose<CR>

" AceJump mappings
map <Leader>saj <Action>(AceAction)
map <Leader>sat <Action>(AceTargetAction)
map <Leader>sal <Action>(AceLineAction)

" map ]d <Action>(NextOccurence)
" map [d <Action>(PreviousOccurence)

" Disable arrow keys to encourage learning hjkl
"noremap <Left> <Nop>
"noremap <Right> <Nop>
"noremap <Up> <Nop>
"noremap <Down> <Nop>

"inoremap <Left> <Nop>
"inoremap <Right> <Nop>
"inoremap <Up> <Nop>
"inoremap <Down> <Nop>

" Find more examples here: https://jb.gg/share-ideavimrc
